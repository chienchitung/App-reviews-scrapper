# -*- coding: utf-8 -*-
"""App reviews scraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FyJIIGlvpgrPJTeVrLvEBW84zB3022au
"""

!pip install app-store-scraper -qqq
!pip install google-play-scraper -qqq
!pip install fasttext -qqq
!pip install emoji -qqq

"""#Step1. Download App store + Google play reviews"""

import pandas as pd
import numpy as np
import requests
import json
from app_store_scraper import AppStore
from google_play_scraper import app, reviews_all
import re
import emoji
import fasttext
import os
from datetime import datetime
import pytz

# 下載 fastText 模型（如果尚未下載）
if not os.path.exists('lid.176.bin'):
    os.system('wget https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin')

# 載入 fastText 模型
model = fasttext.load_model('lid.176.bin')

# 第一部分：獲取 App Store 評論詳細信息
appid = 1631350301
reviews = []

for i in range(1, 10):
    url = f"https://itunes.apple.com/tw/rss/customerreviews/page={i}/id={appid}/sortBy=mostRecent/json"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        if 'feed' in data and 'entry' in data['feed']:
            for entry in data['feed']['entry']:
                # 將日期字串解析為 datetime 對象
                date = datetime.strptime(entry['updated']['label'], '%Y-%m-%dT%H:%M:%S%z')

                # 調整時區為 UTC（或其他需要的時區，例如 pytz.timezone('Asia/Taipei')）
                date_utc = date.astimezone(pytz.utc)

                # 轉換為目標格式
                formatted_date = date_utc.strftime('%Y/%m/%d')

                author = entry['author']['name']['label']
                review = {
                    'key': f"{formatted_date}_{author}",
                    'appVersion': entry['im:version']['label']
                }
                reviews.append(review)
    else:
        print(f"Failed to fetch data from page {i}")

# 將評論轉換為DataFrame
df_reviews_info = pd.DataFrame(reviews)

# 將 'key' 設為主鍵
df_reviews_info.set_index('key', inplace=True)

# 第二部分：獲取和處理 App Store 和 Google Play Store 評論

def is_english_word(word):
    common_english_words = set(['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I',
                                'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at',
                                'bad', 'worst', 'good', 'best', 'app', 'slow', 'fast', 'great', 'terrible'])
    return word.lower() in common_english_words

def detect_language(text):
    text = emoji.replace_emoji(text, replace='')
    if re.search(r'[\u4e00-\u9fff]', text):
        return 'zh'
    text = re.sub(r'[^a-zA-Z\s]', ' ', text)
    text = ' '.join(text.split())
    if not text:
        return 'unknown'
    words = text.split()
    if all(word.isalpha() and (len(word) > 1 or is_english_word(word)) for word in words):
        return 'en'
    try:
        predictions = model.predict(text, k=1)
        lang = predictions[0][0].split('__')[-1]
        return 'en' if lang == 'en' else 'unknown'
    except:
        return 'unknown'

def extract_developer_response_body(response):
    if isinstance(response, dict) and 'body' in response:
        return response['body']
    return None

# 獲取 App Store 的評論
ikea_app_store = AppStore(country='tw', app_name='ikea', app_id='1631350301')
ikea_app_store.review(how_many=2000)

# 將 App Store 的評論轉換為 DataFrame
df_app_store = pd.DataFrame(ikea_app_store.reviews)

# 將 date 列轉換為 datetime 格式，然後只保留年月日
df_app_store['date'] = pd.to_datetime(df_app_store['date']).dt.strftime('%Y/%m/%d')

# 創建新的主鍵
df_app_store['key'] = df_app_store['date'] + '_' + df_app_store['userName']

# 按日期排序，最新的日期在前
df_app_store = df_app_store.sort_values(by='date', ascending=False)

df_app_store.reset_index(drop=True, inplace=True)

# 提取 developerResponse 的 body
df_app_store['developerResponse'] = df_app_store['developerResponse'].apply(extract_developer_response_body)

# 添加一個欄位說明來自 iOS
df_app_store['platform'] = 'iOS'

# 添加 language 欄位
df_app_store['language'] = df_app_store['review'].apply(detect_language)

# 將 'key' 設為主鍵
df_app_store.set_index('key', inplace=True)

# 合併 df_reviews_info 到 df_app_store
df_app_store = df_app_store.join(df_reviews_info, how='left')

# 重設索引
df_app_store.reset_index(inplace=True)

# 確保 'appVersion' 列存在
if 'appVersion' not in df_app_store.columns:
    df_app_store['appVersion'] = ""

# App Store dataset
df_app_store = df_app_store[['key', 'date', 'developerResponse', 'review', 'rating', 'platform', 'appVersion', 'language']]

# 設定應用的 app_id
app_id = 'tw.com.ikea.android'

# 抓取 Google Play Store 的評論
reviews_zh = reviews_all(
    app_id,
    sleep_milliseconds=0,
    lang='zh_TW',
    country='tw'
)

reviews_en = reviews_all(
    app_id,
    sleep_milliseconds=0,
    lang='en',
    country='tw'
)

# 將中文和英文評論合併
all_reviews = reviews_zh + reviews_en

# 將評論轉化為 DataFrame
df_google_play = pd.DataFrame(all_reviews)

df_google_play.rename(columns={'at': 'date', 'replyContent': 'developerResponse', 'score': 'rating', 'content': 'review'}, inplace=True)

# 將 date 列轉換為 yyyy/mm/dd 格式
df_google_play['date'] = pd.to_datetime(df_google_play['date']).dt.strftime('%Y/%m/%d')

# 創建新的主鍵
df_google_play['key'] = df_google_play['date'] + '_' + df_google_play['userName']

# 添加一個欄位說明來自 Android
df_google_play['platform'] = 'Android'

# 添加 language 欄位
df_google_play['language'] = df_google_play['review'].apply(lambda x: 'zh' if any('\u4e00' <= char <= '\u9fff' for char in x) else 'en')

# Google Play Store dataset
df_google_play = df_google_play[['key', 'date', 'developerResponse', 'review', 'rating', 'platform', 'appVersion', 'language']]

# 合併兩個 DataFrame
combined_df = pd.concat([df_app_store, df_google_play], ignore_index=True)

# 將 'date' 轉換為 datetime 格式
combined_df['date'] = pd.to_datetime(combined_df['date']).dt.date

# 如果你想保持日期排序，可以再次排序
combined_df = combined_df.sort_values(by='date', ascending=False)

# 重置索引（如果需要）
combined_df.reset_index(drop=True, inplace=True)

# 移除 'key'
combined_df = combined_df.drop('key', axis=1)

combined_df

"""#Step2. Save to google sheet"""

import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
from gspread_dataframe import set_with_dataframe

# 設定 date 做日期升序
combined_df = combined_df.sort_values(by='date', ascending=True).reset_index(drop=True)

# 設定憑證
scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']

# 替換為你的服務帳號金鑰檔案路徑
creds = Credentials.from_service_account_file('{json key from Google cloud console}', scopes=scope)

gc = gspread.authorize(creds)

# 打開現有的 Google Sheet
spreadsheet_key = '{spreadsheet_key}'  # 替換為你的 spreadsheet key
spreadsheet = gc.open_by_key(spreadsheet_key)

# 選擇要寫入的工作表（例如，名為 "06_App_reviews" 的工作表）
worksheet = spreadsheet.worksheet('06_App_reviews')  # 使用工作表名稱

# 指定要開始寫入的儲存格（例如，從 A1 開始）
start_cell = 'A1'

# 清除工作表中的現有數據（可選）
worksheet.clear()

# 獲取起始儲存格的行列位置
start_row, start_col = gspread.utils.a1_to_rowcol(start_cell)

# 將 DataFrame 寫入 Google Sheet 的指定位置
set_with_dataframe(worksheet, combined_df, row=start_row, col=start_col, include_index=False, include_column_header=True, resize=True)

print(f"Data has been written to the spreadsheet. Spreadsheet URL: {spreadsheet.url}")